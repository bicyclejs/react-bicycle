// generated by ts-bicycle
// do not edit by hand

import Schema from 'bicycle/types/Schema';
import SchemaKind from 'bicycle/types/SchemaKind';
import Query from 'bicycle/types/Query';
import QueryContext from 'bicycle/types/QueryContext';
import MutationContext from 'bicycle/types/MutationContext';
import BicycleServer, {Options} from 'bicycle/server-core';
import {Root} from './schema/Root';
import {Todo} from './schema/Todo';

// root never has any actual data, so we create one reusable instance
const root = new Root({});
const schema: Schema<{}> = {
  Root: {
    kind: SchemaKind.NodeType,
    name: 'Root',
    description: undefined,
    id(): string {
      return 'root';
    },
    matches(obj: any): obj is Root {
      return obj instanceof Root;
    },
    fields: {
      todoById: {
        kind: SchemaKind.FieldMethod,
        name: 'todoById',
        description: undefined,
        resultType: {kind: 'Named', name: 'Todo'} as any,
        argType: {
          kind: 'Object',
          properties: {
            id: {
              kind: 'String',
              loc: {
                fileName:
                  '/Users/fplindesay/Documents/GitHub/react-bicycle/src/__demo__/ts-schema/schema/Root.ts',
                line: 14,
              },
            },
          },
          loc: {
            fileName:
              '/Users/fplindesay/Documents/GitHub/react-bicycle/src/__demo__/ts-schema/schema/Root.ts',
            line: 14,
          },
        } as any,
        auth: 'public',
        resolve(
          value: {},
          args: {id: string},
          context: {},
          subQuery: true | Query,
          qCtx: QueryContext<{}>,
        ): Todo | PromiseLike<Todo> {
          return root.todoById(args);
        },
      },
      todos: {
        kind: SchemaKind.FieldMethod,
        name: 'todos',
        description: undefined,
        resultType: {
          kind: 'List',
          element: {kind: 'Named', name: 'Todo'},
        } as any,
        argType: {kind: 'Void'} as any,
        auth: 'public',
        resolve(
          value: {},
          args: void,
          context: {},
          subQuery: true | Query,
          qCtx: QueryContext<{}>,
        ): Todo[] | PromiseLike<Todo[]> {
          return root.todos();
        },
      },
    },
    mutations: {},
  },
  Todo: {
    kind: SchemaKind.NodeType,
    name: 'Todo',
    description: undefined,
    id(obj: Todo, ctx: {}, qCtx: QueryContext<{}>): string {
      return '' + obj.data.id;
    },
    matches(obj: any): obj is Todo {
      return obj instanceof Todo;
    },
    fields: {
      completed: {
        kind: SchemaKind.FieldMethod,
        name: 'completed',
        description: undefined,
        resultType: {
          kind: 'Boolean',
          loc: {
            fileName:
              '/Users/fplindesay/Documents/GitHub/react-bicycle/src/__demo__/ts-schema/schema/Todo.ts',
            line: 14,
          },
        } as any,
        argType: {kind: SchemaKind.Void},
        auth: 'public',
        resolve(
          value: Todo,
          args: void,
          context: {},
          subQuery: true | Query,
          qCtx: QueryContext<{}>,
        ): boolean {
          return value.data.completed;
        },
      },
      id: {
        kind: SchemaKind.FieldMethod,
        name: 'id',
        description: undefined,
        resultType: {
          kind: 'String',
          loc: {
            fileName:
              '/Users/fplindesay/Documents/GitHub/react-bicycle/src/__demo__/ts-schema/schema/Todo.ts',
            line: 12,
          },
        } as any,
        argType: {kind: SchemaKind.Void},
        auth: 'public',
        resolve(
          value: Todo,
          args: void,
          context: {},
          subQuery: true | Query,
          qCtx: QueryContext<{}>,
        ): string {
          return value.data.id;
        },
      },
      title: {
        kind: SchemaKind.FieldMethod,
        name: 'title',
        description: undefined,
        resultType: {
          kind: 'String',
          loc: {
            fileName:
              '/Users/fplindesay/Documents/GitHub/react-bicycle/src/__demo__/ts-schema/schema/Todo.ts',
            line: 13,
          },
        } as any,
        argType: {kind: SchemaKind.Void},
        auth: 'public',
        resolve(
          value: Todo,
          args: void,
          context: {},
          subQuery: true | Query,
          qCtx: QueryContext<{}>,
        ): string {
          return value.data.title;
        },
      },
    },
    mutations: {
      addTodo: {
        kind: SchemaKind.Mutation,
        name: 'addTodo',
        description: undefined,
        resultType: {
          kind: 'Object',
          properties: {
            id: {
              kind: 'String',
              loc: {
                fileName:
                  '/Users/fplindesay/Documents/GitHub/react-bicycle/src/__demo__/ts-schema/schema/Todo.ts',
                line: 40,
              },
            },
          },
        } as any,
        argType: {
          kind: 'Object',
          properties: {
            title: {
              kind: 'String',
              loc: {
                fileName:
                  '/Users/fplindesay/Documents/GitHub/react-bicycle/src/__demo__/ts-schema/schema/Todo.ts',
                line: 38,
              },
            },
            completed: {
              kind: 'Boolean',
              loc: {
                fileName:
                  '/Users/fplindesay/Documents/GitHub/react-bicycle/src/__demo__/ts-schema/schema/Todo.ts',
                line: 39,
              },
            },
          },
          loc: {
            fileName:
              '/Users/fplindesay/Documents/GitHub/react-bicycle/src/__demo__/ts-schema/schema/Todo.ts',
            line: 37,
          },
        } as any,
        auth: 'public',
        resolve(
          args: {completed: boolean; title: string},
          context: {},
          mCtx: MutationContext<{}>,
        ): {id: string} | PromiseLike<{id: string}> {
          return Todo.addTodo(args);
        },
      },
      clearCompleted: {
        kind: SchemaKind.Mutation,
        name: 'clearCompleted',
        description: undefined,
        resultType: {kind: 'Void'} as any,
        argType: {
          kind: 'Object',
          properties: {},
          loc: {
            fileName:
              '/Users/fplindesay/Documents/GitHub/react-bicycle/src/__demo__/ts-schema/schema/Todo.ts',
            line: 60,
          },
        } as any,
        auth: 'public',
        resolve(
          args: {},
          context: {},
          mCtx: MutationContext<{}>,
        ): void | PromiseLike<void> {
          return Todo.clearCompleted(args);
        },
      },
      destroy: {
        kind: SchemaKind.Mutation,
        name: 'destroy',
        description: undefined,
        resultType: {kind: 'Void'} as any,
        argType: {
          kind: 'Object',
          properties: {
            id: {
              kind: 'String',
              loc: {
                fileName:
                  '/Users/fplindesay/Documents/GitHub/react-bicycle/src/__demo__/ts-schema/schema/Todo.ts',
                line: 52,
              },
            },
          },
          loc: {
            fileName:
              '/Users/fplindesay/Documents/GitHub/react-bicycle/src/__demo__/ts-schema/schema/Todo.ts',
            line: 52,
          },
        } as any,
        auth: 'public',
        resolve(
          args: {id: string},
          context: {},
          mCtx: MutationContext<{}>,
        ): void | PromiseLike<void> {
          return Todo.destroy(args);
        },
      },
      save: {
        kind: SchemaKind.Mutation,
        name: 'save',
        description: undefined,
        resultType: {kind: 'Void'} as any,
        argType: {
          kind: 'Object',
          properties: {
            id: {
              kind: 'String',
              loc: {
                fileName:
                  '/Users/fplindesay/Documents/GitHub/react-bicycle/src/__demo__/ts-schema/schema/Todo.ts',
                line: 56,
              },
            },
            title: {
              kind: 'String',
              loc: {
                fileName:
                  '/Users/fplindesay/Documents/GitHub/react-bicycle/src/__demo__/ts-schema/schema/Todo.ts',
                line: 56,
              },
            },
          },
          loc: {
            fileName:
              '/Users/fplindesay/Documents/GitHub/react-bicycle/src/__demo__/ts-schema/schema/Todo.ts',
            line: 56,
          },
        } as any,
        auth: 'public',
        resolve(
          args: {id: string; title: string},
          context: {},
          mCtx: MutationContext<{}>,
        ): void | PromiseLike<void> {
          return Todo.save(args);
        },
      },
      toggle: {
        kind: SchemaKind.Mutation,
        name: 'toggle',
        description: undefined,
        resultType: {kind: 'Void'} as any,
        argType: {
          kind: 'Object',
          properties: {
            id: {
              kind: 'String',
              loc: {
                fileName:
                  '/Users/fplindesay/Documents/GitHub/react-bicycle/src/__demo__/ts-schema/schema/Todo.ts',
                line: 48,
              },
            },
            checked: {
              kind: 'Boolean',
              loc: {
                fileName:
                  '/Users/fplindesay/Documents/GitHub/react-bicycle/src/__demo__/ts-schema/schema/Todo.ts',
                line: 48,
              },
            },
          },
          loc: {
            fileName:
              '/Users/fplindesay/Documents/GitHub/react-bicycle/src/__demo__/ts-schema/schema/Todo.ts',
            line: 48,
          },
        } as any,
        auth: 'public',
        resolve(
          args: {checked: boolean; id: string},
          context: {},
          mCtx: MutationContext<{}>,
        ): void | PromiseLike<void> {
          return Todo.toggle(args);
        },
      },
      toggleAll: {
        kind: SchemaKind.Mutation,
        name: 'toggleAll',
        description: undefined,
        resultType: {kind: 'Void'} as any,
        argType: {
          kind: 'Object',
          properties: {
            checked: {
              kind: 'Boolean',
              loc: {
                fileName:
                  '/Users/fplindesay/Documents/GitHub/react-bicycle/src/__demo__/ts-schema/schema/Todo.ts',
                line: 44,
              },
            },
          },
          loc: {
            fileName:
              '/Users/fplindesay/Documents/GitHub/react-bicycle/src/__demo__/ts-schema/schema/Todo.ts',
            line: 44,
          },
        } as any,
        auth: 'public',
        resolve(
          args: {checked: boolean},
          context: {},
          mCtx: MutationContext<{}>,
        ): void | PromiseLike<void> {
          return Todo.toggleAll(args);
        },
      },
    },
  },
};
export {Options};
export default class Server extends BicycleServer<{}> {
  constructor(options?: Options) {
    super(schema, options);
  }
}
